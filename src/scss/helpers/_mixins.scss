@mixin breakpoint($point) {
  @if $point == desktop {
    @media (min-width: 1160px) { @content; }
  } @else if $point == s-desktop {
    @media (max-width: 1159px)  { @content; }
  } @else if $point == tablet {
    @media (max-width: 979px)  { @content; }
  } @else if $point == mobile {
    @media (max-width: 767px)  { @content; }
  } @else if $point == s-mobile {
    @media (max-width: 480px)  { @content; }
  } @else if $point == not-tablet {
    @media (min-width: 979px) { @content; }
  } @else if $point == not-mobile {
    @media (min-width: 768px) { @content; }
  } @else if $point == above-desktop {
    @media (min-width: 944px) { @content; }
  } @else {
    @media (max-width: #{$point})  { @content; }
  }
}


// Size of div based on the ratio of image
@mixin panel($width, $height) {
  position: relative;
  display: inline-block;
  vertical-align: top;
  width: 100%;

  &:after {
    padding-top: $height / $width * 100%;
    content: '';
    display: block;
  }
}


// MAKE IFRAMES RESPONSIVE - ratio of embed container (youtube default is 16:9)
@mixin embed-container($width:16, $height:9) {
  position: relative;
  padding-bottom: $height / $width * 100%;
  height: 0;
  overflow: hidden;
  max-width: 100%;

  iframe, object, embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin background-sprite($icon, $set-dimensions: false) {
  @extend %#{$icon}-background;

  @if $set-dimensions == true {
    @extend %#{$icon}-dimensions;
  }
}

@mixin transform-center($position:'') {
  @if($position == 'vertical') {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  } @else if($position == 'horizontal') {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  } @else {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

@mixin transform-reset() {
  top: auto;
  left: auto;
  right: auto;
  bottom: auto;
  padding: 0 15px;
  margin: 1em auto;
  position: static;
  text-align: center;
  transform: translate(0, 0);
}

@function em($pixels) {
  @return #{$pixels/16}em
}

@mixin font($filename, $family, $weight:'normal', $style:'normal') {
  @font-face {
    font-family: $family;
    src: url('../fonts/#{$filename}.eot'); /* IE9 Compat Modes */
    src: url('../fonts/#{$filename}.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
         url('../fonts/#{$filename}.woff2') format('woff2'),
         url('../fonts/#{$filename}.woff') format('woff'), /* Pretty Modern Browsers */
         url('../fonts/#{$filename}.ttf') format('truetype'),
         url('../fonts/#{$filename}.svg##{$filename}') format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}